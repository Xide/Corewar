Classes en CamelCase
fonctions / variables lowerCamelCase
attributs _lowerCamelCase
globales(?) gName

Pour le reste de la norme -> uncrustify
 uncrustify -c uncrustify.cfg --replace --no-backup filename
Please, pushez vos fichiers a la norme :D

Instructions:
DAT
MOV
ADD
SUB
MUL
DOV
MOD
JMP
JMZ
JMN
DJN
CMP
SLT
SPL


2.6 Comment Conventions
0282 ";redcode" as a first line identifies the file as a Redcode
0283 assembly file.  The "" is optional and implementation
0284 dependent.
     
0285 ";strategy " indicates a comment for "public" consumption.
     
0286 ";name ", ";author ",
     0287 ";version ", and ";date "
     0288 offer uniform ways of presenting this information.
          
     0289 ";kill " is for removing warriors from ongoing
     0290 tournaments.  If no  is supplied, all of the author's
     0291 previous submissions will be removed.

Modifiers: .A, .B, .AB, .BA, .F, .X, or .I

Grammar:
0187         assembly_file:
0188                 list
0189         list:
0190                 line | line list
0191         line:
0192                 comment | instruction
0193         comment:
0194                 ; v* EOL | EOL
0195         instruction:
0196                 label_list operation mode field comment |
0197                 label_list operation mode expr , mode expr comment
0198         label_list:
0199                 label | label label_list | label newline label_list | e
0200         label:
0201                 alpha alphanumeral*
0202         operation:
0203                 opcode | opcode.modifier
0204         opcode:
0205                 DAT | MOV | ADD | SUB | MUL | DIV | MOD |
0206                 JMP | JMZ | JMN | DJN | CMP | SLT | SPL |
0207                 ORG | EQU | END
0208         modifier:
0209                 A | B | AB | BA | F | X | I
0210         mode:
0211                 # | $ | @ | < | > | e
0212         expr:
0213                 term |
0214                 term + expr | term - expr |
0215                 term * expr | term / expr |
0216                 term % expr
0217         term:
0218                 label | number | (expression)
0219         number:
0220                 whole_number | signed_integer
0221         signed_integer:
0222                 +whole_number | -whole_number
0223         whole_number:
0224                 numeral+
0225         alpha:
0226                 A-Z | a-z | _
0227         numeral:
0228                 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
0229         alphanumeral:
0230                 alpha | numeral
0231         v:
0232                 ^EOL
0233         EOL:
0234                 newline | EOF
0235         newline:
0236                 LF | CR | LF CR | CR LF
0237         e:

0263 Pseudo-opcodes are "ORG", "EQU", and "END".
     

RunTime Variables:

0398 Core Size:
0399         Core size is the number of instructions which make up core
0400         during the battle.
     
0401 Cycles Before Tie:
0402         In each cycle, one instruction from each warrior is executed.
0403         This variable determines how many cycles without a winner
0404         should be executed before declaring a tie.
     
0405 Initial Instruction:
0406         The initial instruction is that instruction which is preloaded
0407         into core prior to loading warriors.  In addition to loading
0408         an instruction such as "DAT #0, #0" into all of core, the
0409         initial instruction could be set to "NONE", meaning core should
0410         not be cleared between battles, or "RANDOM", meaning core
0411         instructions are filled with randomly generated instructions.
     
0412 Instruction Limit:
0413         The maximum number of instructions allowed per load file.
     
0414 Maximum Number of Tasks:
0415         Each warrior can spawn multiple additional tasks.  This
0416         variable sets the maximum number of tasks allowed per warrior.
0417         In other words, this is the size of each warrior's task queue.
     
0418 Minimum Separation:
0419         The minimum number of instructions from the first instruction
0420         of one warrior to the first instruction of the next warrior.
     
0421 Read Distance:
0422         This is the range available for warriors to read information
0423         from core.  Attempts to read outside the limits of this range
0424         result in reading within the local readable range.  The range
0425         is centered on the current instruction.  Thus, a range of
0426         500 limits reading to offsets of (-249 -> +250) from the
0427         currently executing instruction.  The read limit can therefore
0428         be considered a mini-core within core.  An attempt to read
0429         location PC+251 reads location PC-249 instead.  An attempt to
0430         read location PC+500 reads location PC instead.
     
0431         Read distance must be a factor of core size, otherwise the
0432         above defined behaviour is not guaranteed.
     
0433 Separation:
0434         The number of instructions from the first instruction of one
0435         warrior to the first instruction of the next warrior.
0436         Separation can be set to "RANDOM", meaning separations will be
0437         chosen randomly from those larger than the minimum separation.
     
0438 Warriors:
0439         The initial number of warriors to battle simultaneously in
0440         core.
     
0441 Write Distance:
0442         This is the range available for warriors to write information
0443         to core.  Attempts to write outside the limits of this range
0444         result in writing within the local writable range.  The range
0445         is centered on the current instruction.  Thus, a range of 500
0446         limits writing to offsets of (-249 -> +250) from the
0447         currently executing instruction.  The write limit can
0448         therefore be considered a mini-core within core.  An attempt 
0449         to write location PC+251 writes to location PC-249 instead.  
0450         An attempt to write to location PC+500 writes to location PC 
0451         instead.
     
0452         Write distance must be a factor of core size, otherwise the
0453         above defined behaviour is not guaranteed.
     
     
0454 4.3 Standard Variable Sets
0455 ICWS86:
0456         Core Size:                      8192
0457         Cycles Before Tie:              100000
0458         Initial Instruction:            DAT.F #0, #0
0459         Instruction Limit:              300
0460         Maximum Number of Tasks:        64
0461         Minimum Separation:             300
0462         Read Distance:                  8192
0463         Separation:                     RANDOM
0464         Warriors:                       2
0465         Write Distance:                 8192
     
0466 KOTH:
0467         Core Size:                      8000
0468         Cycles Before Tie:              80000
0469         Initial Instruction:            DAT.F $0, $0
0470         Instruction Limit:              100
0471         Maximum Number of Tasks:        8000
0472         Minimum Separation:             100
0473         Read Distance:                  8000
0474         Separation:                     RANDOM
0475         Warriors:                       2
0476         Write Distance:                 8000
The ICWS '94 standard draft added four more addressing modes, mostly to deal
with A-field indirection, to give a total of 8 modes:

    # -- immediate
    $ -- direct (the $ may be omitted)
         * -- A-field indirect
             @ -- B-field indirect
                 { -- A-field indirect with predecrement
                     < -- B-field indirect with predecrement
                     } -- A-field indirect with postincrement
    > -- B-field indirect with postincrement
    '
